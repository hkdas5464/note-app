{"version":3,"sources":["App.js","actions/contactAction.js","actions/actionTypes.js","reducers/index.js","reducers/contactReducer.js","index.js","store/configureStore.js"],"names":["App","props","handleChange","bind","handleSubmit","state","name","e","this","setState","target","value","preventDefault","contact","createContact","data","index","className","key","onClick","deleteContact","onSubmit","type","onChange","contacts","map","i","listView","Component","connect","ownProps","dispatch","contactAction","id","combineReducers","action","Object","assign","filter","initialState","store","createStore","rootReducer","ReactDOM","render","document","getElementById"],"mappings":"4PAOMA,G,8DAEJ,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAEpB,EAAKE,MAAQ,CACXC,KAAM,IANQ,E,yDAULC,GACXC,KAAKC,SAAS,CACZH,KAAMC,EAAEG,OAAOC,U,mCAINJ,GACXA,EAAEK,iBACF,IAAIC,EAAU,CACZP,KAAME,KAAKH,MAAMC,MAEnBE,KAAKC,SAAS,CACZH,KAAM,KAERE,KAAKP,MAAMa,cAAcD,K,+BAGlBE,EAAMC,GAAO,IAAD,OACnB,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,aACb,wBAAIC,IAAKF,EAAOC,UAAU,4BACvBF,EAAKT,OAGV,yBAAKW,UAAU,YACb,4BAAQE,QAAS,SAACZ,GAAD,OAAO,EAAKa,cAAcb,EAAGS,IAAQC,UAAU,kBAAhE,c,oCAQMV,EAAGS,GACfT,EAAEK,iBACFJ,KAAKP,MAAMmB,cAAcJ,K,+BAGjB,IAAD,OAEP,OACE,yBAAKC,UAAU,aACb,wBAAIA,UAAU,UAAd,oCACA,6BACA,6BACE,gDACA,0BAAMI,SAAUb,KAAKJ,cACnB,2BAAOkB,KAAK,OAAOC,SAAUf,KAAKN,aAAce,UAAU,eAAeN,MAAOH,KAAKH,MAAMC,OAAO,6BAClG,2BAAOgB,KAAK,SAASL,UAAU,kBAAkBN,MAAM,SAEzD,6BACA,wBAAIM,UAAU,cACbT,KAAKP,MAAMuB,SAASC,KAAI,SAACZ,EAASa,GAAV,OAAgB,EAAKC,SAASd,EAASa,a,GAjExDE,cAsFHC,eAbS,SAACxB,EAAOyB,GAC9B,MAAO,CACLN,SAAUnB,EAAMmB,aAIO,SAACO,GAC1B,MAAO,CACLjB,cAAe,SAAAD,GAAO,OAAIkB,ECpFD,SAAClB,GAC1B,MAAO,CACLS,KCH4B,qBDI5BT,QAASA,GDiFwBmB,CAA4BnB,KAC/DO,cAAe,SAAAJ,GAAK,OAAGe,EC7EhB,CACHT,KCTsB,iBDUtBW,GD2EwDjB,QAIjDa,CAA6C7B,G,eGxF7CkC,cAAgB,CAC3BV,SCFW,WAAyB,IAAxBnB,EAAuB,uDAAf,GAAI8B,EAAW,uCACnC,OAAQA,EAAOb,MACb,IFH4B,qBEI5B,MAAM,GAAN,mBACKjB,GADL,CAEE+B,OAAOC,OAAO,GAAIF,EAAOtB,WAE3B,IFPwB,iBEQxB,OAAOR,EAAMiC,QAAO,SAACvB,EAAMW,GAAP,OAAaA,IAAMS,EAAOF,MAC9C,QACM,OAAO5B,MCRnB,ICDuCkC,EDCjCC,ECAGC,YAAYC,EAAaH,GDElCI,IAASC,OACT,kBAAC,IAAD,CAAUJ,MAAOA,GACb,kBAAC,EAAD,OACSK,SAASC,eAAe,W","file":"static/js/main.157d6f27.chunk.js","sourcesContent":["\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as contactAction from './actions/contactAction';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css'\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n     \n    this.state = {\n      name: ''\n    }\n  }\n\n  handleChange(e){\n    this.setState({\n      name: e.target.value\n    })\n  }\n\n  handleSubmit(e){\n    e.preventDefault();\n    let contact = {\n      name: this.state.name\n    }\n    this.setState({\n      name: ''\n    });\n    this.props.createContact(contact);\n  }\n\n  listView(data, index){\n    return (\n      <div className=\"row\">\n        <div className=\"col-md-10\">\n          <li key={index} className=\"list-group-item clearfix\">\n            {data.name}\n          </li>\n        </div>\n        <div className=\"col-md-2\">\n          <button onClick={(e) => this.deleteContact(e, index)} className=\"btn btn-danger\">\n            Remove\n          </button>\n        </div>\n    </div> \n    )\n  }\n\n  deleteContact(e, index){\n    e.preventDefault();\n    this.props.deleteContact(index);\n  }\n\n  render() {\n\n    return(\n      <div className=\"container\">\n        <h1 className=\"myname\">Harendra's  Contacts Application</h1>\n        <hr />\n        <div>\n          <h3>Add Contact Form</h3>\n          <form onSubmit={this.handleSubmit}>\n            <input type=\"text\" onChange={this.handleChange} className=\"form-control\" value={this.state.name}/><br />\n            <input type=\"submit\" className=\"btn btn-success\" value=\"ADD\"/>\n          </form>\n          <hr />\n        { <ul className=\"list-group\">\n          {this.props.contacts.map((contact, i) => this.listView(contact, i))}\n        </ul> }\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    contacts: state.contacts\n  }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    createContact: contact => dispatch(contactAction.createContact(contact)),\n    deleteContact: index =>dispatch(contactAction.deleteContact(index))\n  }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// contactAction.js\r\n\r\nimport * as actionTypes from './actionTypes';\r\n\r\nexport const createContact = (contact) => {\r\n    return {\r\n      type: actionTypes.CREATE_NEW_CONTACT,\r\n      contact: contact\r\n    }\r\n  };\r\n\r\nexport const deleteContact = (id) => {\r\n    return {\r\n        type: actionTypes.REMOVE_CONTACT,\r\n        id: id\r\n    }\r\n}","// actionType.js\r\n\r\nexport const GET_ALL_CONTACTS = 'GET_ALL_CONTACTS';\r\nexport const CREATE_NEW_CONTACT = 'CREATE_NEW_CONTACT';\r\nexport const REMOVE_CONTACT = 'REMOVE_CONTACT';","// index.js\r\n\r\nimport { combineReducers } from 'redux';\r\nimport contacts from './contactReducer';\r\n\r\nexport default combineReducers({\r\n    contacts: contacts\r\n});","// contactReducer.js\r\n\r\nimport * as actionTypes from '../actions/actionTypes';\r\n\r\nexport default (state = [], action) => {\r\n    switch (action.type){\r\n      case actionTypes.CREATE_NEW_CONTACT:\r\n      return [\r\n        ...state,\r\n        Object.assign({}, action.contact)\r\n      ];\r\n      case actionTypes.REMOVE_CONTACT:\r\n      return state.filter((data, i) => i !== action.id);\r\n      default:\r\n            return state;\r\n    }\r\n  };","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.js';\nimport { Provider } from 'react-redux';\nimport configureStore from './store/configureStore';\n\nconst store = configureStore();\n\nReactDOM.render(\n<Provider store={store}>\n    <App />\n</Provider>, document.getElementById('root'));\n","// configureStore.js\r\n\r\nimport {createStore} from 'redux';\r\nimport rootReducer from '../reducers';\r\n\r\nexport default function configureStore(initialState) {\r\n  return createStore(rootReducer, initialState);\r\n}"],"sourceRoot":""}